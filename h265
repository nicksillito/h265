#!/usr/bin/env python3

# v2.05 09/03/2024  maps all audio streams of specified language(s)
# v2.04 24/08/2023  -w and -s take account of number of pixels in image
# v2.03 18/02/2023  supports av1 as well as h265
# v2.02 02/05/2020  audiomap added
# v2.01 26/04/2020  Uses 12 bit encoding (reduces banding) -pix_fmt yuv420p12le
# v2.00 17/04/2020  First Issue

# to use av1 needs to be linked to h265. Calling program name selects video codec

import subprocess
import json
import argparse
import sys
import secrets
import os
import shlex

class FFProbe:

    def __init__(self, video_file):
        if not os.path.isfile(video_file):
            raise OSError(video_file+' not found')
        probe = subprocess.Popen([ 'ffprobe', '-print_format', 'json', '-show_streams',
         video_file ], stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
        self.probe=json.load(probe.stdout)

    def streams(self):
        return len(self.probe['streams'])

    def codec_type(self, stream):
        try:
            return self.probe['streams'][stream]['codec_type']
        except:
            return None

    def codec_name(self, stream):
        try:
            return self.probe['streams'][stream]['codec_name']
        except:
            return None

    def channels(self, stream):
        try:
            return self.probe['streams'][stream]['channels']
        except:
            return None

    def default(self, stream):
        try:
            return self.probe['streams'][stream]['disposition']['default']
        except:
            return 0

    def language(self, stream):
        try:
            return self.probe['streams'][stream]['tags']['language'].lower()
        except:
            return None

    def width(self, stream):
        try:
            return self.probe['streams'][stream]['width']
        except:
            return None

    def height(self, stream):
        try:
            return self.probe['streams'][stream]['height']
        except:
            return None

    def duration(self, stream):
        try:
            return float(self.probe['streams'][stream]['duration'])
        except:
            try:
                h, m, s = self.probe['streams'][stream]['tags']['DURATION'].split(':')
                return float(h)*3600+float(m)*60+float(s)
            except:
                return None
                    
    def sourceid(self, stream):
        try:
            return self.probe['streams'][stream]['tags']['SOURCE_ID-eng']
        except:
            return None
    
    def bytes(self, stream):
        try:
            return int(self.probe['streams'][stream]['tags']['NUMBER_OF_BYTES-eng'])
        except:
            return 0


    def prefer_audio(self, lang=None, xlang=['nar', 'NAR']):
        # lang is a list of preferred languages (eg ['eng', 'fre']) or None
        # xlang is a list of languages to be excluded if lang is None
        # Returns a list of the audio tracks matching the specified language
        # or all audio tracks if lang is specified as None
        # By default, this will accept all language tracks except nar (narration)
        selected=[]
        streamIDs={}    # Dictionary of known stream IDs
        for stream in range(self.streams()):
            if self.codec_type(stream)=='audio' and (lang==None and not self.language(stream)
            in xlang or lang!=None and self.language(stream) in lang):
                # Look out for duplicate streams on disk (eg DTS and DTS-HD)
                # Keep the best (assumed to be the largest)
                if self.sourceid(stream) != None:
                    # Is this a new stream or a better version of an existing stream
                    # otherwise we can ignore it (poorer version of known stream)
                    if not self.sourceid(stream) in streamIDs or \
                    streamIDs[self.sourceid(stream)]['bytes'] < self.bytes(stream):
                        # Deselect any previously selected entry
                        try:
                            selected.remove(streamIDs[self.sourceid(stream)]['stream'])
                        except:
                            pass
                        # Select current stream    
                        selected.append(stream)
                        # And store it
                        streamIDs[self.sourceid(stream)]={  'stream': stream,
                                                            'bytes': self.bytes(stream)}
                else:
                    # No stream ID so add it anyway
                    selected.append(stream)

        return selected


    def video_stream(self):
        # Returns the first video stream
        for i in range(self.streams()):
            if self.codec_type(i) == 'video':
                return i
                break
        return None

    def audiomap(self, streams, reencode=['pcm', 'flac', 'alac', 'dts'],
        codec='libvorbis', quality=5,
        map=0):
        '''returns the required audiomap and conversions
        streams -- list of the channels to be encoded
        reencode -- list of codecs to be reencoded (otherwise copy)
        cocde -- codec to use to reencode
        quality -- quality setting to reencode
        map -- channel to map
        '''
        
        encode=[]
        s=0
        for i in streams:
            if self.codec_type(i) != 'audio':
                raise AssertionError('Expected an audio stream')

            encode.append(f'-map {map}:{i}')
            if self.codec_name(i) in reencode:
                encode.append(f'-c:a:{s} {codec}')
                encode.append(f'-q:a:{s} {quality}')
            else:
                encode.append(f'-c:a:{s} copy')
            
            s+=1
        return ' '.join(encode)


class CropDetect:
    # Identifies the points to crop a video
    def __init__(self, video_file, skip=.1):
        probe=FFProbe(video_file)
        # Points to start and stop searching the file
        video_stream=probe.video_stream()
        if probe.duration(video_stream) is not None:
            trim=[ '-ss', str(skip*probe.duration(video_stream)),
                '-to', str(probe.duration(video_stream)*(1-skip)) ]
        else:
            trim=[]
        # top left box to "delogo" video
        tlbox=f'0:0:{int(probe.width(video_stream)/6)}:' \
        f'{int(probe.height(video_stream)/5.7)}:black:t=fill'
        # Sample a frame every two seconds
        fps='fps=0.5'
        crop = subprocess.run([ 'ffmpeg'] + trim + [ '-i', video_file,
            '-vf', f'fps={fps},drawbox={tlbox},cropdetect', '-f', 'null', '-' ] ,
            capture_output=True,
            universal_newlines=True)
        for i in crop.stderr.split('\n'):
            if i.startswith('[Parsed_cropdetect'):
                match=i
        split1=match.split('=')
        split2=split1[1].split(':')
        self.w=int(split2[0])
        self.h=int(split2[1])
        self.x=int(split2[2])
        self.y=int(split2[3])

    def trim_x(self, x=8):
        # Reduces the horizontal (x) size of the image
        self.w -= 2*x
        self.x += x

    def trim_y(self, y=8):
         # Reduces the vertical (y) size of the image
         self.h -= 2*y
         self.y += y

    def filter(self):
        # Returns the ffmpeg filter
        return f'crop={self.w}:{self.h}:{self.x}:{self.y}'


def server():
    if not os.path.isfile('/usr/local/etc/servername'):
        raise OSError('servername not specified')
    with open('/usr/local/etc/servername', 'r', encoding='utf-8') as f:
        return f.readline().strip()


def nlm_strength(value):
    # Limits input value for nlmeans strength to legal range 1 <= x <= 30
    fvalue=float(value)
    if fvalue < 1 or fvalue > 30:
        raise argparse.ArgumentTypeError(f'{value} is out of range (1 - 30)')
    return fvalue



if __name__ == '__main__':

    videoCodec=os.path.basename(sys.argv[0]).split('.')[0]
    encoder={'h265': 'libx265',
            'av1': 'libaom-av1'
            }
    crf={'h265': {'high': 17, 'med': 20, 'low': 23},
        'av1': {'high': 23, 'med': 25, 'low': 27}
        }
    quality='med'
    lang=None # Default to including all languages

    if not videoCodec in encoder:
        raise SystemExit(f'{videoCodec} is not supported')

    # Read some arguments!
    parser = argparse.ArgumentParser(description='Converts video files to h265 format')
    parser.add_argument('file_to_convert', metavar='file', type=str, nargs='+',
                   help='Filename to be converted')
    # Crop options
    parser.add_argument('-c', action='store_true', help="Don't auto crop")
    parser.add_argument('-x', action='store_true', help='crop the left and right of the image')
    parser.add_argument('-y', action='store_true', help='crop the top and bottom of the image')

    # Quality options
    parser.add_argument('-H', action='store_true', help='higer quality encode')
    parser.add_argument('-l', action='store_true', help='lower quality encode')
    parser.add_argument('-n', metavar='level', type=nlm_strength, default=None,
        help='Use noise reducing filter, (strength 1 - 30)')
    
    # Select required audio language(s)
    parser.add_argument('-L', metavar='lang', action='append',
    help='Specify audio language(s) to include (default:all')

    # Aspect ratio options
    parser.add_argument('-w', action='store_true', help="Wide screen (16x9) aspect ratio")
    parser.add_argument('-s', action='store_true', help='Standard screen (4x3) aspect ratio')

    # Background mode -- no help as not a user option
    parser.add_argument('-B', action='store_true', help=argparse.SUPPRESS)

    args = parser.parse_args()

    if not args.B:
        # Foreground mode -- queue job
        for i in args.file_to_convert:
            if not os.path.isfile(i):
                print (f'Cannot read {i}')
                quit()

        batch_job=f'cd {shlex.quote(os.getcwd())}\n{sys.argv[0]} -B ' +\
        ' '.join([shlex.quote(_) for _ in sys.argv[1:]])

        subprocess.run(['ssh', server(), 'batch'],
            input=batch_job,
            encoding='utf-8',
            stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    else:
        # Background mode -- process conversion
       for i in args.file_to_convert:
            video_filter=['yadif=1:-1:1']   #Always deinterlace
            # Any noise filter
            if args.n:
                video_filter.append(f'nlmeans=s={args.n}')

            # Apply quality
            if args.H:
                quality='high'
            if args.l:
                quality='low'

            # Crop if required
            if not args.c:
                cd=CropDetect(i)
                if args.x:
                    cd.trim_x()
                if args.y:
                    cd.trim_y()
                video_filter.append(cd.filter())

            # Select audio stream(s)
            if args.L:
                lang=args.L

            probe=FFProbe(i)
            audio=probe.prefer_audio(lang)

             # Process aspect ratio
            if args.w:
                video_filter.append('setsar='+str(probe.height(probe.video_stream())/
                probe.width(probe.video_stream())*16/9))
            if args.s:
                video_filter.append('setsar='+str(probe.height(probe.video_stream())/
                probe.width(probe.video_stream())*4/3))
            # Build video filter
            if len(video_filter) > 0:
                vf='-vf '+','.join(video_filter)
            else:
                vf=''

            temp_name=f'/tmp/{secrets.token_hex(15)}.mkv'
            namei, suffixi =os.path.splitext(i)
            batch_job='cd '+shlex.quote(os.getcwd())+'\n' + \
                'ffmpeg -y -i '+shlex.quote(i) + \
                ' -flags +global_header -map 0:v -c:v '+encoder[videoCodec]+' -crf ' + \
                str(crf[videoCodec][quality])+' -pix_fmt yuv420p12le ' + vf + ' ' + \
                probe.audiomap(audio) + \
                ' -map 0:s? -c:s copy ' + temp_name +' &&\n' + \
                'rm '+shlex.quote(i)+' &&\n'+ \
                'mv '+ temp_name +' '+shlex.quote(namei+'.mkv')

            subprocess.run(['batch'],
            input=batch_job,
            universal_newlines=True)

